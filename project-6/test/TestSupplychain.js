// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Granny Smith"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const wholesalerID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Wholesaler: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])


    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest apples", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.registerFarmer(originFarmerID, {from: ownerID})

        // Mark an item as Harvested by calling function harvestItem()
        var result = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: originFarmerID})

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'Harvested'

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to sort apples", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Sorted by calling function processtItem()
        var result = await supplyChain.sortItem(upc, {from: originFarmerID})

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'Sorted'

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack apples", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Packed by calling function packItem()
        var result = await supplyChain.packItem(upc, {from: originFarmerID})

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'Packed'

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell apples", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as ForSale by calling function sellItem()
        var result = await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'ForSale'

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a wholesaler to buy apples", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.registerWholesaler(wholesalerID, {from: ownerID})

        // get seller balance
        const initialSellerBalance = parseInt(await web3.eth.getBalance(originFarmerID), 10)

        // Mark an item as Sold by calling function buyItem()
        var result = await supplyChain.buyItem(upc, {from: wholesalerID, value: productPrice})

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'Sold'

        // get seller balance
        const finalSellerBalance = parseInt(await web3.eth.getBalance(originFarmerID), 10)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], wholesalerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], wholesalerID, 'Error: Missing or Invalid wholesalerID')
        assert.equal(finalSellerBalance, initialSellerBalance + parseInt(productPrice, 10))
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a wholesaler to ship apples", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Packed by calling function shipItem()
        var result = await supplyChain.shipItem(upc, {from: wholesalerID})

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'Shipped'

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark apples received", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.registerRetailer(retailerID)

        // Mark an item as Packed by calling function receiveItem()
        var result = await supplyChain.receiveItem(upc, {from: retailerID})

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'Received'

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase apples", async() => {
        const supplyChain = await SupplyChain.deployed()

        // get seller balance
        const initialSellerBalance = parseInt(await web3.eth.getBalance(retailerID), 10)

        // Mark an item as Packed by calling function purchaseItem()
        var result = await supplyChain.purchaseItem(upc, {from: consumerID, value: productPrice * 2})

        // get seller balance
        const finalSellerBalance = parseInt(await web3.eth.getBalance(retailerID), 10)

        // Declare and Initialize a variable for event
        var eventEmitted = result.logs[0].event == 'Purchased'

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
        // due to transaction costs, refunds will eat into the balance a little
        assert.isBelow(finalSellerBalance, initialSellerBalance + parseInt(productPrice, 10) * 2)
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

});

